#!/usr/bin/env python3
"""dion - CLI interface to Dion document compiler. """
###############################################################################
# Copyright (c) 2020, Kenneth P. J. Dyer <kenneth@avoceteditors.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of the copyright holder nor the name of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
###############################################################################

# Module Imports
import argparse
import sys

# Local Imports
import dion
import dion.build
import dion.compile
import dion.log

if __name__ == '__main__':

    # Initialize the Parser
    parser = argparse.ArgumentParser(
        prog='dion'
    )
    parser.set_defaults(func=dion.report_version)

    # Otions
    opts = parser.add_argument_group("Options")

    # Debug
    opts.add_argument(
        "-d", "--debug", action="store_true",
        help="Enables debugging messages to log output")

    opts.add_argument(
        "-f", "--force", action="store_true",
        help="Forces operations to overwrite existing content")

    # Verbose
    opts.add_argument(
        "-v", "--verbose", action="store_true",
        help="Enables verbosity in logging messages")

    # Commands
    cmds = parser.add_subparsers(title="Commands")

    # Build Command
    build = cmds.add_parser("build", help="Builds LaTeX or HTML document")
    build.set_defaults(func=dion.build.run)

    build.add_argument(
        "-a", "--all", action="store_true")

    build.add_argument(
        "-E", "--engine",
        choices=["lualatex", "pdflatex", "xelatex"],
        default="xelatex",
        help="Sets the LaTeX engine to use in rendering PDF's")

    build.add_argument(
        "-s", "--source", default=".dion/project.xml",
        help="Path to source XML")

    build.add_argument(
        "-o", "--output", default="build",
        help="Path to output compiled XML document")

    build.add_argument(
        "-P", "--post-process", action="store_true",
        help="Sets whether to perform post-processing before writing to file")

    build.add_argument(
        "-T", "--type", choices=["book", "chapter", "web"], default="book",
        help="Sets the build type")

    # Compile Command
    compile = cmds.add_parser("compile", help="Compiles XML documents")
    compile.set_defaults(func=dion.compile.run)

    compile.add_argument(
        "-o", "--output", default=".dion/project.xml",
        help="Path to output compiled XML document")

    compile.add_argument(
        "source", default="project.xml",
        help="Source file to compile")

    # Version Command
    vers = cmds.add_parser("version", help="Reports version informaiton")
    vers.set_defaults(func=dion.report_version)

    # Parse Args
    args = parser.parse_args()

    # Init Logger
    dion.log.set_logger(args.verbose, args.debug)

    # Run Application
    args.func(args)

    # Exit
    sys.exit(0)
